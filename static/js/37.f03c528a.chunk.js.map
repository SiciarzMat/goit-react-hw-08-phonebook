{"version":3,"file":"static/js/37.f03c528a.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/AddForm/AddForm.module.css?c4c6","webpack://react-homework-template/./src/components/AddForm/AddName/AddName.module.css?f150","components/AddForm/AddName/AddName.jsx","webpack://react-homework-template/./src/components/AddForm/AddPhone/AddPhone.module.css?89ea","components/AddForm/AddPhone/AddPhone.jsx","components/AddForm/AddForm.jsx","components/Calendar/Calendar.jsx","webpack://react-homework-template/./src/components/ContactsList/ContactsList.module.css?d8e9","webpack://react-homework-template/./src/components/ContactsList/ContactsListItem/ContactsListItem.module.css?89f9","components/ContactsList/ContactsListItem/ContactsListItem.jsx","components/ContactsList/ContactsList.jsx","pages/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"AddForm_container__d8WiA\",\"title\":\"AddForm_title__m0PVc\",\"form\":\"AddForm_form__giF8Q\",\"button\":\"AddForm_button__9-j4i\"};","// extracted by mini-css-extract-plugin\nexport default {\"name\":\"AddName_name__j0b-5\"};","import { TextField } from '@mui/material';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { inputHandlerAction } from 'redux/contacts/contactsSlice';\nimport { selectName } from 'redux/selectors';\nimport css from './AddName.module.css';\n\nexport const AddName = () => {\n  const dispatch = useDispatch();\n  const name = useSelector(selectName);\n\n  const handleChange = event => {\n    const payload = { name: event.target.name, value: event.target.value };\n    dispatch(inputHandlerAction(payload));\n  };\n\n  return (\n    <>\n      <TextField\n        className={css.name}\n        id=\"outlined-basic\"\n        size=\"small\"\n        onChange={handleChange}\n        autoComplete=\"off\"\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        label=\"Enter Name\"\n        variant=\"outlined\"\n        pattern=\"^[а-źА-Ź]+(([' -][а-źА-Ź ])?[а-źА-Ź]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"number\":\"AddPhone_number__Cb8xe\"};","import { TextField } from '@mui/material';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { inputHandlerAction } from 'redux/contacts/contactsSlice';\nimport { selectNumber } from 'redux/selectors';\nimport css from './AddPhone.module.css';\n\nexport const AddPhone = () => {\n  const dispatch = useDispatch();\n  const number = useSelector(selectNumber);\n\n  const handleChange = event => {\n    const payload = { name: event.target.name, value: event.target.value };\n    dispatch(inputHandlerAction(payload));\n  };\n\n  return (\n    <>\n      <TextField\n        className={css.number}\n        size=\"small\"\n        id=\"outlined-basic\"\n        onChange={handleChange}\n        autoComplete=\"off\"\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        label=\"Enter number\"\n        variant=\"outlined\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { inputHandlerAction } from 'redux/contacts/contactsSlice';\nimport { addContactAction } from 'redux/contacts/contactOperations';\nimport { selectContacts, selectName, selectNumber } from 'redux/selectors';\nimport css from './AddForm.module.css';\nimport { AddName } from './AddName/AddName';\nimport { AddPhone } from './AddPhone/AddPhone';\nimport { Button, IconButton } from '@mui/material';\nimport PersonAddAlt1Icon from '@mui/icons-material/PersonAddAlt1';\n\nexport const AddForm = () => {\n  const name = useSelector(selectName);\n  const number = useSelector(selectNumber);\n  const contactsList = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const found = contactsList.find(contact => contact.name === name);\n    if (found) {\n      alert(`${name} is already in contacts`);\n    } else {\n      dispatch(\n        addContactAction({\n          name: name,\n          number: number,\n        })\n      );\n      dispatch(inputHandlerAction({ name: 'name', value: '' }));\n      dispatch(inputHandlerAction({ name: 'number', value: '' }));\n    }\n  };\n\n  return (\n    <div className={css.container}>\n      <h3 className={css.title}>Add new contact:</h3>\n      <form className={css.form} onSubmit={handleSubmit}>\n        <AddName />\n        <AddPhone />\n        <Button\n          className={css.button}\n          sx={{ textTransform: 'none' }}\n          variant=\"contained\"\n          type=\"submit\"\n          startIcon={<PersonAddAlt1Icon />}\n        >\n          Add contact\n        </Button>\n        <IconButton color=\"primary\" aria-label=\"add contact\"></IconButton>\n      </form>\n    </div>\n  );\n};\n","import * as React from 'react';\nimport { LocalizationProvider } from '@mui/x-date-pickers';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { DateCalendar } from '@mui/x-date-pickers/DateCalendar';\nimport { Paper } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nexport default function BasicDateCalendar() {\n  const theme = useTheme();\n  const isDesktop = useMediaQuery(theme.breakpoints.up('850'));\n  return (\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\n      {isDesktop && (\n        <Paper\n          elevation={2}\n          sx={{\n            marginLeft: '10px',\n            maxWidth: '320px',\n          }}\n        >\n          <DateCalendar />\n        </Paper>\n      )}\n    </LocalizationProvider>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactsList_container__r+Txe\",\"empty\":\"ContactsList_empty__HYxRP\",\"rainbow\":\"ContactsList_rainbow__Dz4yy\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactsListItem_item__VnwkN\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport css from './ContactsListItem.module.css';\nimport { useDispatch } from 'react-redux';\nimport {\n  setOpenedContactAction,\n  showHideModalAction,\n} from 'redux/modal/modalSlice';\nimport { Avatar, Chip } from '@mui/material';\n\nconst stringToColor = string => {\n  let hash = 0;\n  let i;\n\n  /* eslint-disable no-bitwise */\n  for (i = 0; i < string.length; i += 1) {\n    hash = string.charCodeAt(i) + ((hash << 5) - hash);\n  }\n\n  let color = '#';\n\n  for (i = 0; i < 3; i += 1) {\n    const value = (hash >> (i * 8)) & 0xff;\n    color += `00${value.toString(16)}`.slice(-2);\n  }\n  /* eslint-enable no-bitwise */\n\n  return color;\n};\nconst stringAvatar = name => {\n  const names = name.split(' ');\n  const firstLetters = names.slice(0, 2).map(n => n[0]);\n  return {\n    sx: {\n      bgcolor: stringToColor(name),\n    },\n    children: firstLetters.join('').toUpperCase(),\n  };\n};\n\nexport const ContactsListItem = ({\n  contact,\n  id,\n  name,\n  number,\n  onContactRemove,\n}) => {\n  const dispatch = useDispatch();\n  const handleContactsEdit = contact => {\n    dispatch(showHideModalAction());\n    dispatch(setOpenedContactAction(contact));\n  };\n  return (\n    <Chip\n      avatar={<Avatar {...stringAvatar(`${name}`)} />}\n      key={id}\n      className={css.item}\n      label={`${name}: ${number}`}\n      variant=\"outlined\"\n      onClick={() => handleContactsEdit(contact)}\n      onDelete={() => onContactRemove(id, name)}\n    />\n  );\n};\n\nContactsListItem.propTypes = {\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  name: PropTypes.string,\n  number: PropTypes.string,\n  onContactRemove: PropTypes.func,\n};\n","import React from 'react';\nimport css from './ContactsList.module.css';\nimport { ContactsListItem } from './ContactsListItem/ContactsListItem';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectFilter } from 'redux/selectors';\nimport { deleteContactAction } from 'redux/contacts/contactOperations';\n\nexport const ContactsList = () => {\n  const contactsList = useSelector(selectContacts);\n\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleRemoveContact = (id, name) => {\n    dispatch(deleteContactAction(id));\n    alert(`${name} will be removed from your contacts`);\n  };\n  const getFilteredList = () => {\n    return contactsList.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n  const sortedList = getFilteredList().sort((a, b) =>\n    a.name.localeCompare(b.name)\n  );\n  const list = sortedList.map(contact => (\n    <ContactsListItem\n      key={contact.id}\n      contact={contact}\n      id={contact.id}\n      name={contact.name}\n      number={contact.number}\n      onContactRemove={handleRemoveContact}\n      filter={filter}\n    />\n  ));\n  return (\n    <>\n      {contactsList.length > 0 || (\n        <div className={css.empty}>add some contacts</div>\n      )}\n      {contactsList.length > 0 && <ul className={css.container}>{list}</ul>}\n    </>\n  );\n};\n","import { Container } from '@mui/material';\nimport { AddForm } from 'components/AddForm/AddForm';\nimport Calendar from 'components/Calendar/Calendar';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { Loader } from 'components/Loader/Loader';\nimport React from 'react';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContactsAction } from 'redux/contacts/contactOperations';\nimport { selectError, selectIsLoading } from 'redux/selectors';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  useEffect(() => {\n    dispatch(fetchContactsAction());\n  }, [dispatch]);\n  return (\n    <Container\n      sx={{\n        display: { xs: 'block', sm: 'grid' },\n        gridTemplateColumns: '1fr 1fr 1fr',\n        marginTop: '20px',\n      }}\n    >\n      <AddForm />\n      {isLoading && !error && <Loader />}\n      <ContactsList />\n      <Calendar />\n    </Container>\n  );\n};\nexport default Contacts;\n"],"names":["AddName","dispatch","useDispatch","name","useSelector","selectName","TextField","className","css","id","size","onChange","event","payload","target","value","inputHandlerAction","autoComplete","type","label","variant","pattern","title","required","AddPhone","number","selectNumber","AddForm","contactsList","selectContacts","onSubmit","preventDefault","find","contact","alert","addContactAction","Button","sx","textTransform","startIcon","PersonAddAlt1","IconButton","color","BasicDateCalendar","theme","useTheme","isDesktop","useMediaQuery","breakpoints","up","LocalizationProvider","dateAdapter","AdapterDayjs","Paper","elevation","marginLeft","maxWidth","DateCalendar","stringToColor","string","i","hash","length","charCodeAt","toString","slice","stringAvatar","firstLetters","split","map","n","bgcolor","children","join","toUpperCase","ContactsListItem","onContactRemove","Chip","avatar","Avatar","onClick","showHideModalAction","setOpenedContactAction","handleContactsEdit","onDelete","ContactsList","filter","selectFilter","handleRemoveContact","deleteContactAction","list","toLowerCase","includes","sort","a","b","localeCompare","isLoading","selectIsLoading","error","selectError","useEffect","fetchContactsAction","Container","display","xs","sm","gridTemplateColumns","marginTop","Loader"],"sourceRoot":""}